from datetime import datetime
from enum import Enum
from typing import Annotated, Dict, List
from pydantic import BaseModel, Field


class ArenaClientState(BaseModel):
    """Data structure storing persistent Cheesy Arena client state"""

    session_token: str | None = None
    """Session token for authenticated requests to the arena"""


class MatchEventType(Enum):
    """The overall type of an event captured for review"""

    AUTO_SCORING = "auto_scoring"
    """The moment where AUTO period scores are evaluated"""
    ENDGAME_SCORING = "endgame_scoring"
    """The moment where end-of-game scores are evaluated"""
    VAR_REVIEW = "var_review"
    """A moment requested for review by the VAR"""
    HR_REVIEW = "hr_review"
    """A moment requested for review by the Head Referee"""
    ROBOT_DISCONNECT = "robot_disconnect"
    """A robot disconnecting during the match"""
    MINOR_FOUL = "minor_foul"
    """A minor foul during the match"""
    MAJOR_FOUL = "major_foul"
    """A major foul during the match"""


class EventCoordinates(BaseModel):
    """Coordinates for an event on the field"""

    x: float
    """X coordinate in the range 0..1"""
    y: float
    """Y coordinate in the range 0..1"""


class Alliance(Enum):
    """An alliance in a match"""

    RED = "red"
    BLUE = "blue"


AllianceTeamList = Annotated[List[int], Field(min_length=3, max_length=3)]
"""List of exactly 3 team numbers for an alliance"""


class MatchEvent(BaseModel):
    """Record of a review-worthy event during a match"""

    event_id: str
    """Unique identifier for the event, generated by the VAR server"""
    event_type: MatchEventType
    """Type of the event"""
    time: float
    """Time in seconds from the start of the match when the event occurred"""
    alliance: Alliance | None = None
    """Alliance associated with the event, if applicable"""
    team_idx: Annotated[int | None, Field(ge=0, le=2)] = None
    """Team index (0, 1, or 2) within the alliance associated with the event, if applicable"""
    reason: str | None = None
    """Optional brief description of the event, e.g. 'Damaging contact' or 'Multiple fouls'"""
    coordinates: EventCoordinates | None = None
    """Optional coordinates for the event on the field, if applicable"""
    arena_foul_id: int | None = None
    """Identifier for a foul occurrence in Cheesy Arena, if applicable"""


class RecordedMatch(BaseModel):
    """Data structure storing a recorded match"""

    var_id: str
    """VAR server-assigned unique identifier for the match"""
    arena_id: int
    """Unique identifier for the match"""
    clip_id: int | None = None
    """Hyperdeck-assigned identifier for the recorded video clip"""
    clip_file_name: str
    """Our chosen filename for the clip on the HyperDeck"""
    timestamp: datetime
    """Timestamp of the start of the match"""
    teams: Annotated[
        Dict[Alliance, AllianceTeamList], Field(min_length=2, max_length=2)
    ]
    """Team numbers in the match, by alliance"""
    events: List[MatchEvent] = []
    """List of events during the match that the user can warp to"""
